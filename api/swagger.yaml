---
swagger: "2.0"
info:
  description: "CMS Service API provides access to CMS entities and supports CMS use-cases"
  version: "1.0.0"
  title: "CMS"
host: "learned-stone-189802.appspot.com"
basePath: "/api"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /auth/user:
    post:
      tags:
      - "Auth"
      summary: "Authenticate as an existing user to get an access token"
      operationId: "AuthUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsAuthUserRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsAccessToken"
      x-swagger-router-controller: "Auth"
  /auth/user/logout:
    post:
      tags:
      - "Auth"
      summary: "Logout deactivates the provided access token"
      operationId: "Logout"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsAccessToken"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      x-swagger-router-controller: "Auth"
  /comments:
    get:
      tags:
      - "Comments"
      summary: "Get all comments"
      operationId: "GetComments"
      parameters: []
      responses:
        200:
          description: "(streaming responses)"
          schema:
            $ref: "#/definitions/cmsComment"
      x-swagger-router-controller: "Comments"
    post:
      tags:
      - "Comments"
      summary: "Create a comment"
      operationId: "CreateComment"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsCreateCommentRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsCommentRequest"
      security:
      - APIKey: []
      x-swagger-router-controller: "Comments"
  /comments/{id}:
    get:
      tags:
      - "Comments"
      summary: "Get a comment"
      operationId: "GetComment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsComment"
      x-swagger-router-controller: "Comments"
    put:
      tags:
      - "Comments"
      summary: "Update a comment"
      operationId: "UpdateComment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsUpdateCommentRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      security:
      - APIKey: []
      x-swagger-router-controller: "Comments"
    delete:
      tags:
      - "Comments"
      summary: "Delete a comment"
      operationId: "DeleteComment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      security:
      - APIKey: []
      x-swagger-router-controller: "Comments"
  /is-setup:
    get:
      tags:
      - "Setup"
      summary: "Check if application is setup"
      operationId: "IsSetup"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufBoolValue"
      x-swagger-router-controller: "Setup"
  /posts:
    get:
      tags:
      - "Posts"
      summary: "Get all posts"
      operationId: "GetPosts"
      parameters: []
      responses:
        200:
          description: "(streaming responses)"
          schema:
            $ref: "#/definitions/cmsPost"
      x-swagger-router-controller: "Posts"
    post:
      tags:
      - "Posts"
      summary: "Create a post"
      operationId: "CreatePost"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsCreatePostRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsPostRequest"
      security:
      - APIKey: []
      x-swagger-router-controller: "Posts"
  /posts/slug/{slug}:
    get:
      tags:
      - "Posts"
      summary: "Get a post (by slug)"
      operationId: "GetPostBySlug"
      parameters:
      - name: "slug"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsPost"
      x-swagger-router-controller: "Posts"
  /posts/{id}:
    get:
      tags:
      - "Posts"
      summary: "Get a post"
      operationId: "GetPost"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsPost"
      x-swagger-router-controller: "Posts"
    put:
      tags:
      - "Posts"
      summary: "Update a post"
      operationId: "UpdatePost"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsUpdatePostRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      security:
      - APIKey: []
      x-swagger-router-controller: "Posts"
    delete:
      tags:
      - "Posts"
      summary: "Delete a post"
      operationId: "DeletePost"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      security:
      - APIKey: []
      x-swagger-router-controller: "Posts"
  /posts/{id}/comments:
    get:
      tags:
      - "Posts"
      summary: "Get all comments by post"
      operationId: "GetPostComments"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "(streaming responses)"
          schema:
            $ref: "#/definitions/cmsComment"
      x-swagger-router-controller: "Posts"
  /register/user/0:
    post:
      tags:
      - "Register"
      summary: "Register for a new user account in order to receive an email with\
        \ a new user authentication token"
      operationId: "RegisterNewUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsCreateUserRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      x-swagger-router-controller: "Register"
  /register/user/1:
    post:
      tags:
      - "Register"
      summary: "Verify ownership of your email address in order to finish creating\
        \ your new user account"
      operationId: "VerifyNewUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsVerifyNewUserRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsUserRequest"
      x-swagger-router-controller: "Register"
  /setup:
    post:
      tags:
      - "Setup"
      summary: "Setup the application"
      operationId: "Setup"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/cmsCreateUserRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsUserRequest"
      x-swagger-router-controller: "Setup"
  /unpublished-posts:
    get:
      tags:
      - "Posts"
      summary: "Get all unpublished posts"
      operationId: "GetUnpublishedPosts"
      parameters: []
      responses:
        200:
          description: "(streaming responses)"
          schema:
            $ref: "#/definitions/cmsUnpublishedPost"
      security:
      - APIKey: []
      x-swagger-router-controller: "Posts"
  /unpublished-posts/slug/{slug}:
    get:
      tags:
      - "Posts"
      summary: "Get an unpublished post (by slug)"
      operationId: "GetUnpublishedPostBySlug"
      parameters:
      - name: "slug"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsUnpublishedPost"
      security:
      - APIKey: []
      x-swagger-router-controller: "Posts"
  /unpublished-posts/{id}:
    get:
      tags:
      - "Posts"
      summary: "Get an unpublished post"
      operationId: "GetUnpublishedPost"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsUnpublishedPost"
      security:
      - APIKey: []
      x-swagger-router-controller: "Posts"
  /users/{id}:
    get:
      tags:
      - "Users"
      summary: "Get a user"
      operationId: "GetUser"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/cmsUser"
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "Users"
      summary: "Delete a user"
      operationId: "DeleteUser"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/protobufEmpty"
      security:
      - APIKey: []
      x-swagger-router-controller: "Users"
  /users/{id}/comments:
    get:
      tags:
      - "Users"
      summary: "Get all comments by user"
      operationId: "GetUserComments"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "(streaming responses)"
          schema:
            $ref: "#/definitions/cmsComment"
      x-swagger-router-controller: "Users"
securityDefinitions:
  APIKey:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  cmsAccessToken:
    type: "object"
    properties:
      accessToken:
        type: "string"
      tokenType:
        type: "string"
      expiresIn:
        type: "integer"
        format: "int64"
    title: "AccessToken"
  cmsAuthUserRequest:
    type: "object"
    properties:
      id:
        type: "string"
      password:
        type: "string"
    title: "AuthUserRequest"
  cmsComment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "string"
      created:
        type: "string"
      lastEdited:
        type: "string"
      userId:
        type: "string"
      postId:
        type: "string"
    title: "Comment"
  cmsCommentRequest:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    title: "CommentRequest"
  cmsCreateCommentRequest:
    type: "object"
    properties:
      content:
        type: "string"
      userId:
        type: "string"
      postId:
        type: "integer"
        format: "int64"
    title: "CreateCommentRequest"
  cmsCreatePostRequest:
    type: "object"
    properties:
      title:
        type: "string"
      content:
        type: "string"
    title: "CreatePostRequest"
  cmsCreateUserRequest:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    title: "CreateUserRequest"
  cmsPost:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      content:
        type: "string"
      created:
        type: "string"
      lastEdited:
        type: "string"
      slug:
        type: "string"
    title: "Post"
  cmsPostRequest:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    title: "PostRequest"
  cmsUnpublishedPost:
    type: "object"
    properties:
      post:
        $ref: "#/definitions/cmsPost"
      published:
        type: "boolean"
        format: "boolean"
      last_published:
        type: "string"
    title: "Unpublished Post"
  cmsUpdateCommentRequest:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "string"
    title: "UpdateCommentRequest"
  cmsUpdatePostRequest:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      content:
        type: "string"
      published:
        type: "boolean"
        format: "boolean"
    title: "UpdatePostRequest"
  cmsUser:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      created:
        type: "string"
      lastActive:
        type: "string"
      role:
        $ref: "#/definitions/cmsUserRole"
    title: "User"
  cmsUserPassword:
    type: "object"
    properties:
      password:
        type: "string"
    title: "UserPassword"
  cmsUserRequest:
    type: "object"
    properties:
      id:
        type: "string"
    title: "UserRequest"
  cmsUserRole:
    type: "string"
    title: "UserRole"
    enum:
    - "UNKNOWN"
    - "ADMIN"
    - "USER"
    default: "UNKNOWN"
  cmsVerifyNewUserRequest:
    type: "object"
    properties:
      token:
        type: "string"
    title: "VerifyNewUserRequest"
  protobufBoolValue:
    type: "object"
    properties:
      value:
        type: "boolean"
        format: "boolean"
        description: "The bool value."
    description: "Wrapper message for `bool`.\n\nThe JSON representation for `BoolValue`\
      \ is JSON `true` and `false`."
  protobufEmpty:
    type: "object"
    title: "A generic empty message that you can re-use to avoid defining duplicated\n\
      empty messages in your APIs. A typical example is to use it as the request\n\
      or the response type of an API method. For instance:"
    description: "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n\
      \    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`."
  protobufStringValue:
    type: "object"
    properties:
      value:
        type: "string"
        description: "The string value."
    description: "Wrapper message for `string`.\n\nThe JSON representation for `StringValue`\
      \ is JSON string."
